#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <2 3>;
        };

        F5_DSP {
            bindings = <&kp F5>;
            key-positions = <21 8>;
        };

        TAB_Key {
            bindings = <&kp TAB>;
            key-positions = <20 21>;
        };

        Control_V {
            bindings = <&kp RC(V)>;
            key-positions = <21 19>;
        };

        Control_X {
            bindings = <&kp RC(X)>;
            key-positions = <21 32>;
        };

        Win_V {
            bindings = <&kp RG(V)>;
            key-positions = <21 7>;
        };

        Home_key {
            bindings = <&kp HOME>;
            key-positions = <21 5>;
        };

        End_key {
            bindings = <&kp END>;
            key-positions = <21 17>;
        };

        Alt_left {
            bindings = <&kp RA(LEFT)>;
            key-positions = <21 29>;
        };

        Alt_Right {
            bindings = <&kp RA(RIGHT_ARROW)>;
            key-positions = <21 30>;
        };

        ESC_Key {
            bindings = <&kp ESC>;
            key-positions = <41 21>;
        };

        Win_TAB {
            bindings = <&kp LG(TAB)>;
            key-positions = <33 32>;
        };

        bar-key {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
        };

        SP-Key {
            bindings = <&kp SPACE>;
            key-positions = <7 6>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        macro_00: macro_00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0 &kp NUMBER_0>;
            label = "MACRO_00";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                        &kp T                                                            &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                        &kp G        &kp LS(LG(S))                      &kp MINUS        &kp H        &kp J  &lt 5 K    &lt 3 L  &lt 1 ESC
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                        &kp B        &kp COLON                          &kp SEMICOLON    &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT MINUS
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 INT_HENKAN  &lt 2 SPACE  &lt_to_layer_0 3 INT_MUHENKAN      &lt 7 BACKSPACE  &lt 1 ENTER                             &mt RIGHT_CONTROL DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp HOME            &kp F2               &kp RG(V)  &kp F5     &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp END             &kp RC(S)            &kp RC(V)  &kp RC(C)  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)  &trans     &kp RC(X)  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &kp LANGUAGE_5                                                 &kp F12
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp COLON                                                     &kp EQUAL          &kp CARET         &kp PLUS         &kp ASTERISK       &kp LEFT_PARENTHESIS
&kp SLASH                   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp DOUBLE_QUOTES  &kp LC(LA(KP_NUMBER_0))      &kp LS(0x87)  &kp EXCLAMATION    &kp LEFT_BRACKET  &kp HASH         &kp PIPE           &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD         &kp UNDER                    &trans        &kp RIGHT_BRACKET  &kp BACKSLASH     &kp RIGHT_BRACE  &kp RIGHT_BRACE j  &kp BACKSLASH
&trans                      &kp NUMBER_0  &macro_00     &trans        &trans             &trans                       &trans        &trans                                                                   &kp LS(0x89)
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                               &trans          &trans            &trans          &trans           &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans          &trans          &kp INT_MUHENKAN  &kp INT_HENKAN  &kp RC(RS(TAB))  &kp GRAVE
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans          &trans          &trans            &trans          &kp RG(TAB)      &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &kp LANGUAGE_1  &kp LANGUAGE_2                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4  &trans    &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans                            &trans            &kp RG(UP_ARROW)    &trans                   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                            &kp RS(RG(LEFT))  &kp RG(DOWN_ARROW)  &kp RS(RG(RIGHT_ARROW))  &kp GRAVE
&trans  &trans  &trans  &trans  &trans  &trans      &kp C   &mt INTERNATIONAL_4 INT_MUHENKAN  &kp INT_HENKAN    &kp INT_MUHENKAN    &kp LANGUAGE_6           &to_layer_0 INT_MUHENKAN
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                                           &to_layer_0 INT_HENKAN
            >;
        };
    };
};
